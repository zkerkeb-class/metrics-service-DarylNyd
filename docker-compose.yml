version: '3.8'

services:
  # Metrics Service
  metrics-service:
    build: .
    container_name: nydart-metrics-service
    ports:
      - "5005:5005"
    environment:
      - NODE_ENV=development
      - PORT=5005
      - MONGODB_URI=mongodb://mongodb:27017/nydart_metrics
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://host.docker.internal:5002
      - DATABASE_SERVICE_URL=http://host.docker.internal:5001
      - PAYMENT_SERVICE_URL=http://host.docker.internal:3004
      - FRONTEND_URL=http://host.docker.internal:3000
      - JWT_SECRET=your-jwt-secret-here
      - API_KEY=your-secret-api-key-here
      - METRICS_RETENTION_DAYS=90
      - SALES_RETENTION_DAYS=365
      - PERFORMANCE_RETENTION_DAYS=30
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - metrics-network
    restart: unless-stopped

  # MongoDB for Metrics
  mongodb:
    image: mongo:7.0
    container_name: nydart-metrics-mongodb
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_DATABASE=nydart_metrics
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - metrics-network
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: nydart-metrics-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - metrics-network
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: nydart-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - metrics-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: nydart-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - metrics-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: nydart-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - metrics-network
    restart: unless-stopped

  # Alert Manager for Notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: nydart-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - metrics-network
    restart: unless-stopped

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:


networks:
  metrics-network:
    driver: bridge
